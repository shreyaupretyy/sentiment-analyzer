{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Sentiment Analyzer Microservice","text":"<p>A FastAPI-based microservice for sentiment analysis following the 12-Factor App methodology.</p>"},{"location":"#overview","title":"Overview","text":"<p>The Sentiment Analyzer is a simple microservice that analyzes the sentiment of text inputs and categorizes them as positive, negative, or neutral using a rule-based approach.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Sentiment Analysis API: Simple REST endpoint for text sentiment analysis</li> <li>Rule-based Algorithm: Uses word lists to determine sentiment without external dependencies</li> <li>12-Factor App Design: Follows best practices for cloud-native applications</li> <li>Containerized: Ready for deployment in any container environment</li> </ul>"},{"location":"#architecture","title":"Architecture","text":"<p>The application follows a clean, modular architecture:</p> <pre><code>app/\n\u251c\u2500\u2500 api/            # API endpoints and routers\n\u251c\u2500\u2500 core/           # Core configuration and settings\n\u251c\u2500\u2500 models/         # Data models and schemas\n\u2514\u2500\u2500 services/       # Business logic services\n</code></pre>"},{"location":"#12-factor-app-principles","title":"12-Factor App Principles","text":"<p>This project implements the 12-Factor App methodology:</p> <ol> <li>Codebase: Single codebase tracked in version control</li> <li>Dependencies: Explicitly declared and isolated</li> <li>Config: Stored in environment variables</li> <li>Backing Services: Treated as attached resources</li> <li>Build, Release, Run: Strict separation of build and run stages</li> <li>Processes: Stateless and share-nothing</li> <li>Port Binding: Self-contained service</li> <li>Concurrency: Scale out via process model</li> <li>Disposability: Fast startup and graceful shutdown</li> <li>Dev/Prod Parity: Development environment similar to production</li> <li>Logs: Treated as event streams</li> <li>Admin Processes: Run as one-off processes</li> </ol>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Please refer to the README.md for installation and usage instructions.</p>"},{"location":"api/","title":"API Documentation","text":"<p>The Sentiment Analyzer provides a simple REST API for analyzing text sentiment.</p>"},{"location":"api/#endpoints","title":"Endpoints","text":""},{"location":"api/#post-apiv1analyze","title":"POST /api/v1/analyze","text":"<p>Analyzes the sentiment of provided text.</p> <p>Request Body:</p> <pre><code>{\n\"text\": \"I love this amazing product!\"\n}\n</code></pre> <p>Response:</p> <pre><code>{\n\"text\": \"I love this amazing product!\",\n\"sentiment\": \"positive\",\n\"confidence\": 0.85\n}\n</code></pre>"},{"location":"api/#request-fields","title":"Request Fields","text":"Field Type Description Required text string The text to analyze Yes"},{"location":"api/#response-fields","title":"Response Fields","text":"Field Type Description text string The original text that was analyzed sentiment string The detected sentiment (positive, negative, neutral) confidence float Confidence score (0-1) of the sentiment detection"},{"location":"api/#status-codes","title":"Status Codes","text":"Status Code Description 200 Success 422 Validation Error (invalid request body) 500 Server Error"},{"location":"api/#get-health","title":"GET /health","text":"<p>Health check endpoint for monitoring.</p> <p>Response:</p> <pre><code>{\n\"status\": \"healthy\"\n}\n</code></pre>"},{"location":"api/#how-the-sentiment-analysis-works","title":"How the Sentiment Analysis Works","text":"<p>The sentiment analyzer uses a rule-based approach with predefined word lists:</p> <ol> <li>Text is preprocessed and tokenized into words</li> <li>Words are matched against positive and negative word lists</li> <li>Negation words (like \"not\") are detected and flip the sentiment</li> <li>The final sentiment is determined by the predominance of positive or negative words</li> <li>Confidence is calculated based on the ratio of positive/negative words</li> </ol>"},{"location":"deployment/","title":"Deployment Guide","text":"<p>This document outlines how to deploy the Sentiment Analyzer service to various environments.</p>"},{"location":"deployment/#docker-deployment","title":"Docker Deployment","text":""},{"location":"deployment/#local-docker-deployment","title":"Local Docker Deployment","text":"<ol> <li>Build and run the application:</li> </ol> <pre><code>docker-compose up --build\n</code></pre> <ol> <li>Access the API at <code>http://localhost:8000</code></li> </ol>"},{"location":"deployment/#cloud-deployment","title":"Cloud Deployment","text":""},{"location":"deployment/#azure-container-instances","title":"Azure Container Instances","text":"<ol> <li>Build and push the Docker image:</li> </ol> <pre><code>az acr build --registry &lt;your-registry&gt; --image sentiment-analyzer:latest .\n</code></pre> <ol> <li>Deploy to Azure Container Instances:</li> </ol> <pre><code>az container create \\\n--resource-group &lt;your-resource-group&gt; \\\n--name sentiment-analyzer \\\n--image &lt;your-registry&gt;.azurecr.io/sentiment-analyzer:latest \\\n--dns-name-label sentiment-analyzer \\\n--ports 8000\n</code></pre>"},{"location":"deployment/#aws-ecs","title":"AWS ECS","text":"<ol> <li>Create an ECS task definition (example):</li> </ol> <pre><code>{\n\"family\": \"sentiment-analyzer\",\n\"networkMode\": \"awsvpc\",\n\"executionRoleArn\": \"arn:aws:iam::your-account-id:role/ecsTaskExecutionRole\",\n\"containerDefinitions\": [\n{\n\"name\": \"sentiment-analyzer\",\n\"image\": \"your-repo/sentiment-analyzer:latest\",\n\"essential\": true,\n\"portMappings\": [\n{\n\"containerPort\": 8000,\n\"hostPort\": 8000,\n\"protocol\": \"tcp\"\n}\n],\n\"environment\": [\n{\n\"name\": \"ENVIRONMENT\",\n\"value\": \"production\"\n}\n],\n\"logConfiguration\": {\n\"logDriver\": \"awslogs\",\n\"options\": {\n\"awslogs-group\": \"/ecs/sentiment-analyzer\",\n\"awslogs-region\": \"us-west-2\",\n\"awslogs-stream-prefix\": \"ecs\"\n}\n}\n}\n],\n\"requiresCompatibilities\": [\"FARGATE\"],\n\"cpu\": \"256\",\n\"memory\": \"512\"\n}\n</code></pre> <ol> <li>Create an ECS service to run the task definition</li> </ol>"},{"location":"deployment/#kubernetes-deployment","title":"Kubernetes Deployment","text":"<ol> <li>Create a Kubernetes deployment manifest:</li> </ol> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\nname: sentiment-analyzer\nspec:\nreplicas: 3\nselector:\nmatchLabels:\napp: sentiment-analyzer\ntemplate:\nmetadata:\nlabels:\napp: sentiment-analyzer\nspec:\ncontainers:\n- name: sentiment-analyzer\nimage: your-repo/sentiment-analyzer:latest\nports:\n- containerPort: 8000\nenv:\n- name: ENVIRONMENT\nvalue: \"production\"\nreadinessProbe:\nhttpGet:\npath: /health\nport: 8000\ninitialDelaySeconds: 5\nperiodSeconds: 10\nlivenessProbe:\nhttpGet:\npath: /health\nport: 8000\ninitialDelaySeconds: 15\nperiodSeconds: 20\n</code></pre> <ol> <li>Create a Kubernetes service:</li> </ol> <pre><code>apiVersion: v1\nkind: Service\nmetadata:\nname: sentiment-analyzer\nspec:\nselector:\napp: sentiment-analyzer\nports:\n- port: 80\ntargetPort: 8000\ntype: LoadBalancer\n</code></pre> <ol> <li>Apply the manifests:</li> </ol> <pre><code>kubectl apply -f deployment.yaml\nkubectl apply -f service.yaml\n</code></pre>"},{"location":"deployment/#environment-variables","title":"Environment Variables","text":"<p>Make sure to set these environment variables in your deployment environment:</p> Variable Production Value APP_NAME sentiment-analyzer APP_VERSION 0.1.0 ENVIRONMENT production HOST 0.0.0.0 PORT 8000 LOG_LEVEL info"},{"location":"deployment/#monitoring","title":"Monitoring","text":"<p>The service exposes a <code>/health</code> endpoint that can be used for health checks by monitoring systems.</p>"}]}